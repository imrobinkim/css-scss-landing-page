// COLORS
$color-primary: #55c57a; // green
$color-primary-light: #7ed56f; // light green
$color-primary-dark: #28b485; // dark green

$color-grey-dark: #777;
$color-white: #fff;

*,
*::after,
*::before {
  /* Apply to all after & before pseudo-elements */
  margin: 0;
  padding: 0;
  box-sizing: inherit; /* force inheritance from body (so that it can be overridden by plugins if necessary */
}

html {
  /* Root font-size  */
  /* use percentage as unit so that user can zoom in/out on browser. */
  font-size: 62.5%; /* 1 rem = 10px or 62.5% of 16px (16px is usual default browser font-size) */
}

body {
  /* Set font related styles in body, not universal selector */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 3rem;

  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;

  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;
  margin-bottom: 6rem;

  /* Determines whether back part of an element is hidden when transformed */
  /* removes shakiness that sometimes happens in animations! */
  backface-visibility: hidden;
}

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/* pseudoclass: used to style elements in a specific state */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s; /* on initial state */
  position: relative;
  font-size: 1.6rem;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
  /* when element is clicked */
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
  background-color: $color-white;
  color: $color-grey-dark;
}

/* pseudoelement: adding a virtual element after element we've selected */
.btn::after {
  /* pseudoelement looks exactly like .btn & hides behind it after animation */
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; /* on initial state */
}

.btn--white::after {
  background-color: $color-white;
}

/* styles for .btn pseudoelement that get applied only in hover state */
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0; /* fading out */
}

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s; /* delay of 0.75s */
  animation-fill-mode: backwards; /* beginning property as defined in keyframes is applied before animation is display, so opacity: 0; */
}
